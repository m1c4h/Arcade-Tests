*** Settings ***
Documentation     These tests are aimed at testing a simple enrollment
Library  OperatingSystem
Library  String
#Test Setup
Resource          ../Keywords/WebActions.txt

Test Teardown       close browser



*** Test Cases ***
small Modal Test
    [Documentation]   This test validates small modals can be opens ,closes and persists after page reload
    [Tags]     smallmodal
    Open Arcade
    reload page
    Click Element       ${roleDropdown}
    Page Should Contain Element         ${openModal}
    click element       ${closeModal}
    Page should not contain element     ${openModal}
    click Element       ${roleDropdown}
    Page Should Contain Element         ${openModal}
    reload page
    Page Should Contain Element         ${openModal}




Big Modal Test
    [Documentation]    This test validates big modals can be opens ,closes and persists after page reload.Loops through 4 big modals
    [Tags]     bigModal
    Open Arcade
    reload page
    @{elements}     Get Elements     ${bigModal}
    #Loop through all the big modal window and perform these assertions
    :FOR    ${element}    IN     @{elements}
    \       Click Element       ${element}
    \       Click Element       ${closeModal}    #Close button should close big modals
    \       Page should not contain element     ${openModal}
    \       Execute JavaScript   window.scrollTo (900,100)
    \       Click Element        ${element}
    \       Press Key   	css=.modal-header-content   	\\27  #Escape should close big modals
    \       Page should not contain element         css=.ng-scope-hide-outlines-modal-open
    \       Execute JavaScript   window.scrollTo (900,100)
    \       Click Element        ${element}
    \       Go Back     #Go back on browser window should close big modals
    \       Page should not contain element   ${openModal}



Content Hopper Test
    [Documentation]    This test validates content hopper button scrolls down
    [Tags]     hopper
    Open Arcade
    #get x and y cocordinates of element before scrolling
    ${vert_pos} =    Get Vertical Position    ${contentHopper}
    ${horz_pos} =    Get Horizontal Position      ${contentHopper}
    Click Element       ${contentHopper}
    #get x and y cocordinates of element before scrolling
    ${Second_vert_pos} =    Get Vertical Position    ${contentHopper}
    ${horz_pos} =    Get Horizontal Position      ${contentHopper}
    #Assert page has scrolled down by checking vertical position has increased from where we started.
    should be true       ${Second_vert_pos}>${vert_pos}




